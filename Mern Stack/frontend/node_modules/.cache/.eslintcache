[{"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/index.js":"1","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/App.js":"2","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/context/ProjectContext.js":"3","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/context/AuthContext.js":"4","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/Sidebar.js":"5","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/searchbar.js":"6","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/PasswordReset.js":"7","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/ForgotPassword.js":"8","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/Navbar.js":"9","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Homepage.js":"10","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Signup.js":"11","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Login.js":"12","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useAuthContext.js":"13","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Profile.js":"14","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Home.js":"15","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Confirmation.js":"16","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Chatroom.js":"17","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/MyProfile.js":"18","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/projectSearchRes.js":"19","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useLogout.js":"20","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useDelete.js":"21","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useLogin.js":"22","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/ProjectCard.js":"23","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useProfile.js":"24","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useProjectsContext.js":"25","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useSignup.js":"26","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/ProjectForm.js":"27","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/ProjectDetails.js":"28"},{"size":516,"mtime":1681758452612,"results":"29","hashOfConfig":"30"},{"size":2787,"mtime":1681798617459,"results":"31","hashOfConfig":"30"},{"size":798,"mtime":1681758452611,"results":"32","hashOfConfig":"30"},{"size":867,"mtime":1681758452611,"results":"33","hashOfConfig":"30"},{"size":1248,"mtime":1681773312063,"results":"34","hashOfConfig":"30"},{"size":5522,"mtime":1681773312063,"results":"35","hashOfConfig":"30"},{"size":2272,"mtime":1681758452610,"results":"36","hashOfConfig":"30"},{"size":3757,"mtime":1681758452610,"results":"37","hashOfConfig":"30"},{"size":1421,"mtime":1681773312062,"results":"38","hashOfConfig":"30"},{"size":198,"mtime":1681758452613,"results":"39","hashOfConfig":"30"},{"size":901,"mtime":1681758452613,"results":"40","hashOfConfig":"30"},{"size":1057,"mtime":1681758452613,"results":"41","hashOfConfig":"30"},{"size":287,"mtime":1681758452611,"results":"42","hashOfConfig":"30"},{"size":8183,"mtime":1681773312065,"results":"43","hashOfConfig":"30"},{"size":1097,"mtime":1681773312064,"results":"44","hashOfConfig":"30"},{"size":1157,"mtime":1681758452612,"results":"45","hashOfConfig":"30"},{"size":7499,"mtime":1681773312064,"results":"46","hashOfConfig":"30"},{"size":3549,"mtime":1681767446375,"results":"47","hashOfConfig":"30"},{"size":5393,"mtime":1681773312065,"results":"48","hashOfConfig":"30"},{"size":490,"mtime":1681758452612,"results":"49","hashOfConfig":"30"},{"size":970,"mtime":1681758452612,"results":"50","hashOfConfig":"30"},{"size":953,"mtime":1681758452612,"results":"51","hashOfConfig":"30"},{"size":5227,"mtime":1681773312062,"results":"52","hashOfConfig":"30"},{"size":1061,"mtime":1681758452612,"results":"53","hashOfConfig":"30"},{"size":311,"mtime":1681758452612,"results":"54","hashOfConfig":"30"},{"size":1074,"mtime":1681758452612,"results":"55","hashOfConfig":"30"},{"size":3972,"mtime":1681773312063,"results":"56","hashOfConfig":"30"},{"size":1345,"mtime":1681758452611,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"kklqzd",{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/index.js",["154"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { ProjectsContextProvider } from './context/ProjectContext'\nimport { AuthContextProvider } from './context/AuthContext'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n\n    <AuthContextProvider>\n      <ProjectsContextProvider>\n        <App />\n      </ProjectsContextProvider>\n    </AuthContextProvider>\n\n);\n\n\n\n","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/App.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/context/ProjectContext.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/context/AuthContext.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/Sidebar.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/searchbar.js",["155"],[],"// export default Search;\nimport \"./search.css\";\n\nimport { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst languageOptions = ['Python', 'C++', 'Java', 'JavaScript', 'C', 'HTML/CSS', 'PHP', 'SQL', 'Swift', 'Go', ];\nconst projectTypeOptions = [\n  'Front-end',\n  'Back-end',\n  'Full-stack',\n  'React',\n  'Flask',\n  \"Rest\",\n  'Machine Learning',\n  'Data Analysis',\n  'Smart Devices',\n  'Artificial Intelligence',\n  'Social Network',\n  'Visualization',\n];\nconst courseNumberOptions = ['CS1101', 'CS2201', 'CS2212', 'CS3250', 'CS3251', 'CS3281', 'CS3270','CS4278', 'CS3265', 'CS4260', 'CS4288','CS3891'];\n\n\nconst Search = () => {\n    const location = useLocation();\n    \n    const searchQuery = new URLSearchParams(location.search).get('search') || 'NULL/NULL';\n    const [selectedTags, setSelectedTags] = useState(searchQuery.split('/')[0].split(',').filter(tag => tag !== 'NULL'));\n    const [textInput, setTextInput] = useState(searchQuery.split('/')[1] !== 'NULL' ? searchQuery.split('/')[1] : '');\n    const tagOptions = ['Python', 'C++', 'Java', 'JavaScript', 'C',\n                        'Front-end', 'Back-end', 'Full-stack',\n                        'Machine Learning', 'Data Analysis', 'Smart Devices', 'Artificial Intelligence',\n                        'Social Network', 'Visualization'];\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n    \n        // Combine the selected tags into a single string separated by commas\n        const tagsString = selectedTags.join(',');\n    \n        // Create the search query using the new format\n        const searchQuery = `${tagsString}/${textInput}`;\n    \n        console.log(searchQuery);\n    \n        // Check if both textInput and selectedTags are empty\n        if (textInput.trim() === '' && selectedTags.length === 0) {\n            window.location.href = `/projectsearchres?search=NULL/NULL`; // Redirect with the desired search query\n        } else if (textInput.trim() === ''){\n            window.location.href = `/projectsearchres?search=${tagsString}/NULL`\n        } else if (selectedTags.length === 0){\n            window.location.href = `/projectsearchres?search=NULL/${textInput}`\n        } else {\n            window.location.href = `/projectsearchres?search=${encodeURIComponent(searchQuery)}`;\n        }\n    };\n    \n    \n    \n\n    const handleTagSelect = (tag) => {\n        if (!selectedTags.includes(tag)) {\n            setSelectedTags([...selectedTags, tag]);\n        }\n    }\n\n    const handleTagRemove = (tag) => {\n        setSelectedTags(selectedTags.filter((t) => t !== tag));\n    }\n\n    const [dropdownVisible, setDropdownVisible] = useState(false);\n\n    const toggleDropdown = () => {\n        setDropdownVisible(!dropdownVisible);\n    };\n\n    return (\n        <form className=\"create\" onSubmit={handleSubmit}>\n            <div className=\"search-container\">\n                <div className=\"tags-container\">\n                <div className=\"search-icon\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#657789\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-search\">\n                            <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                            <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n                        </svg>\n                        </div>\n                    {selectedTags.map((tag) => (\n                        <div key={tag} className=\"tag-box\" onClick={() => handleTagRemove(tag)}>\n                            {tag}\n                            <button type=\"button\">x</button>\n                        </div>\n                    ))}\n                    <input\n                        type=\"text\"\n                        className=\"text-input\"\n                        placeholder=\"Search Projects with Keywords\"\n                        value={textInput}\n                        onChange={({ currentTarget: input }) => {\n                            setTextInput(input.value);\n                        }}\n                    />\n                </div>\n                <button type=\"button\" className=\"advanced-search-btn\" onClick={toggleDropdown}>\n                    Select Tags\n                </button>\n                {dropdownVisible && (\n  <div className=\"dropdown-container\">\n    <div className=\"dropdown-subcategory\">\n      <h4>Languages</h4>\n      {languageOptions.map((tag) => (\n        <div key={tag} className=\"tag-option\" onClick={() => handleTagSelect(tag)}>\n          {tag}\n        </div>\n      ))}\n    </div>\n    <div className=\"dropdown-subcategory\">\n      <h4>Project Type</h4>\n      {projectTypeOptions.map((tag) => (\n        <div key={tag} className=\"tag-option\" onClick={() => handleTagSelect(tag)}>\n          {tag}\n        </div>\n      ))}\n    </div>\n    <div className=\"dropdown-subcategory\">\n      <h4>Course Number</h4>\n      {courseNumberOptions.map((tag) => (\n        <div key={tag} className=\"tag-option\" onClick={() => handleTagSelect(tag)}>\n          {tag}\n        </div>\n      ))}\n    </div>\n  </div>\n)}\n                <button type=\"submit\">Search</button>\n            </div>\n            {/* <div className=\"tag-options-container\">\n                {tagOptions.map((tag) => (\n                    <div key={tag} className=\"tag-option\" onClick={() => handleTagSelect(tag)}>\n                        {tag}\n                    </div>\n                ))}\n            </div> */}\n        </form>\n    );\n};\n\nexport default Search;","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/PasswordReset.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/ForgotPassword.js",["156"],[],"import React, { useEffect, useState } from 'react'\nimport { useNavigate, useParams, NavLink } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Box from '@mui/material/Box';\nimport validator from 'validator'\nimport './PasswordReset.css'\n\nconst ForgotPassword = () => {\n\n    const { email, token } = useParams();\n\n    const history = useNavigate();\n\n    const [data2, setData] = useState(false);\n\n    const [password, setPassword] = useState(\"\");\n\n    const [message, setMessage] = useState(\"\");\n\n    const userValid = async () => {\n        const res = await fetch(`/api/user/forgotpassword/${email}/${token}`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n\n        const data = await res.json()\n\n        if (data.status === 201) {\n            console.log(\"user valid\")\n        } else {\n            console.log(\"user invalid\")\n            history(\"*\")\n        }\n    }\n\n\n    const setval = (e) => {\n        setPassword(e.target.value)\n    }\n\n    const sendpassword = async (e) => {\n        e.preventDefault();\n\n\n        if (password === \"\") {\n            toast.error(\"password is required!\", {\n                position: \"top-center\"\n            });\n        } else if (!validator.isStrongPassword(password)) {\n            toast.error('Password not strong enough. Password must contain a combination of uppercase letters, lowercase letters, numbers, and symbols.')\n        } else {\n            const res = await fetch(`/api/user/${email}/${token}`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({ password })\n            });\n\n            const data = await res.json()\n\n            if (data.status === 201) {\n                setPassword(\"\")\n                setMessage(true)\n            } else {\n                toast.error(\"Token Expired\",{\n                    position: \"top-center\"\n                })\n            }\n        }\n    }\n\n    useEffect(() => {\n        userValid()\n        setTimeout(() => {\n            setData(true)\n        }, 2000)\n    }, [])\n\n    return (\n        <>\n            {\n                data2 ? (\n                    <>\n                        <section>\n                            <div className=\"form_data\">\n                                <div className=\"form_heading\">\n                                    <h1>Enter Your NEW Password</h1>\n                                </div>\n\n                                <form>\n                                    {message ? <p style={{ color: \"green\", fontWeight: \"bold\" }}>Password Successfully Updated </p> : \"\"}\n                                    <div className=\"form_input\">\n                                        <label htmlFor=\"password\">New password</label>\n                                        <input type=\"password\" value={password} onChange={setval} name=\"password\" id=\"password\" placeholder='Enter Your new password' />\n                                    </div>\n\n                                    <button className='btn' onClick={sendpassword}>Change password</button>\n                                </form>\n                                <p><NavLink to=\"/login\">Back to Login</NavLink></p>\n                                <ToastContainer />\n                            </div>\n                        </section>\n                    </>\n                ) : <Box sx={{ display: 'flex', justifyContent: \"center\", alignItems: \"center\", height: \"100vh\" }}>\n                    Loading... &nbsp;\n                </Box>\n            }\n        </>\n    )\n}\n\nexport default ForgotPassword","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/Navbar.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Homepage.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Signup.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Login.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useAuthContext.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Profile.js",["157"],[],"import { useState } from \"react\"\nimport { useProfile } from \"../hooks/useProfile\"\nimport { useNavigate } from 'react-router-dom';\n\nconst Profile = () => {\n  const [firstName, setFirstname] = useState('')\n  const [lastName, setLastname] = useState('')\n  const [phoneNumber, setPhone] = useState('')\n  const [year, setYear] = useState('')\n  const [languages, setLanguages] = useState([])\n  const [roles, setRoles] = useState([])\n  const [socialInfo, setSocialInfo] = useState('')\n  const { updateProfile, isLoading, error } = useProfile()\n  const navigate = useNavigate()\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const my_profile = { firstName, lastName, phoneNumber, year, languages, roles, socialInfo };\n    await updateProfile(my_profile);\n\n    if (isLoading) {\n      console.log(\"Updating profile...\")\n    }\n\n    if (error) {\n      console.error(error)\n    }\n    \n    console.log(my_profile)\n\n    navigate('/myprofile')\n  }\n\n  const handleLanguages = (event) => {\n    const isChecked = event.target.checked;\n    const value = event.target.value;\n    if (isChecked) {\n      setLanguages([...languages, value]);\n    } else {\n      setLanguages(languages.filter((item) => item !== value));\n    }\n  };\n\n  const handleRoles = (event) => {\n    const isChecked = event.target.checked;\n    const value = event.target.value;\n    if (isChecked) {\n      setRoles([...roles, value]);\n    } else {\n      setRoles(roles.filter((item) => item !== value));\n    }\n  };\n\n  return (\n    <form className=\"profile\" onSubmit={handleSubmit}>\n\n        <div className=\"profile-image\">\n          < img className=\"rounded-circle\" width=\"150px\" src=\"https://st3.depositphotos.com/15648834/17930/v/600/depositphotos_179308454-stock-illustration-unknown-person-silhouette-glasses-profile.jpg\" />\n        </div>\n\n        <div className=\"profile-header\">\n            <h3>Profile Settings</h3>\n          </div>\n        \n        <div className=\"profile-content\">\n\n          <div className=\"first-name\">\n            <label className=\"labels\">First Name</label>\n            <input \n            type=\"text\" \n            className=\"form-control\" \n            placeholder=\"first name\" \n            onChange={(e) => setFirstname(e.target.value)}\n            required/>\n          </div>\n\n          <div className=\"last-name\">\n            <label className=\"labels\">Last Name</label>\n          <input \n            type=\"text\" \n            className=\"form-control\" \n            placeholder=\"last Name\" \n            onChange={(e) => setLastname(e.target.value)}\n            required/>\n          </div>\n\n          <div className=\"number\">\n            <label className=\"labels\">Mobile Number</label>\n            <input \n              type=\"tel\" \n              className=\"form-control\" \n              placeholder=\"enter phone number\" \n              onChange={(e) => setPhone(e.target.value)}\n              onKeyDown={(e) => {\n                if (!((e.key >= '0' && e.key <= '9') || e.key === 'Backspace' || e.key === 'Delete')) {\n                  e.preventDefault();\n                }\n              }}\n              maxLength={10}\n              required\n            />\n          </div>\n\n          <div className=\"year\">\n            <label className=\"labels\">Year</label>\n            <select className=\"form-control\" onChange={(e) => setYear(e.target.value)} required>\n              <option value=\"\">-- select a year --</option>\n              <option value=\"freshman\">Freshman</option>\n              <option value=\"sophomore\">Sophomore</option>\n              <option value=\"junior\">Junior</option>\n              <option value=\"senior\">Senior</option>\n            </select>\n          </div>\n\n          <div className=\"languages\">\n            <label className=\"labels\">Proficient programming languages</label>\n            <div className=\"form-control\">\n              <input type=\"checkbox\" id=\"c++\" name=\"languages\" value=\"C++\" onChange={(e) => handleLanguages(e)} />\n              <label htmlFor=\"c++\">C++</label>\n\n              <input type=\"checkbox\" id=\"python\" name=\"languages\" value=\"Python\" onChange={(e) => handleLanguages(e)} />\n              <label htmlFor=\"python\">Python</label>\n\n              <input type=\"checkbox\" id=\"java\" name=\"languages\" value=\"Java\" onChange={(e) => handleLanguages(e)} />\n              <label htmlFor=\"java\">Java</label>\n\n              <input type=\"checkbox\" id=\"javascript\" name=\"languages\" value=\"JavaScript\" onChange={(e) => handleLanguages(e)} />\n              <label htmlFor=\"javascript\">JavaScript</label>\n\n              <input type=\"checkbox\" id=\"ruby\" name=\"languages\" value=\"Ruby\" onChange={(e) => handleLanguages(e)} />\n              <label htmlFor=\"ruby\">Ruby</label>\n\n              <input type=\"checkbox\" id=\"php\" name=\"languages\" value=\"PHP\" onChange={(e) => handleLanguages(e)} />\n              <label htmlFor=\"php\">PHP</label>\n\n              <input type=\"checkbox\" id=\"swift\" name=\"languages\" value=\"Swift\" onChange={(e) => handleLanguages(e)} />\n              <label htmlFor=\"Swift\">Swift</label>\n\n              <input type=\"checkbox\" id=\"go\" name=\"languages\" value=\"Go\" onChange={(e) => handleLanguages(e)} />\n              <label htmlFor=\"Go\">Go</label>\n\n              <input type=\"checkbox\" id=\"html/css\" name=\"languages\" value=\"HTML/CSS\" onChange={(e) => handleLanguages(e)} />\n              <label htmlFor=\"HTML/CSS\">HTML/CSS</label>\n\n              <input type=\"checkbox\" id=\"sql\" name=\"languages\" value=\"SQL\" onChange={(e) => handleLanguages(e)} />\n              <label htmlFor=\"SQL\">SQL</label>\n            </div>\n          </div>\n\n          <div className=\"roles\">\n            <label className=\"labels\">Roles you have experienced</label>\n            <div className=\"form-control\">\n                <input type=\"checkbox\" id=\"frontend\" name=\"roles\" value=\"Frontend\" onChange={(e) => handleRoles(e)} />\n                <label htmlFor=\"frontend\">Frontend Developer</label>\n\n                <input type=\"checkbox\" id=\"backend\" name=\"roles\" value=\"Backend\" onChange={(e) => handleRoles(e)} />\n                <label htmlFor=\"backend\">Backend Developer</label>\n\n                <input type=\"checkbox\" id=\"fullstack\" name=\"roles\" value=\"Fullstack\" onChange={(e) => handleRoles(e)} />\n                <label htmlFor=\"fullstack\">Fullstack Developer</label>\n\n                <input type=\"checkbox\" id=\"ui designer\" name=\"roles\" value=\"UI Designer\" onChange={(e) => handleRoles(e)} />\n                <label htmlFor=\"UI Designer\">UI Designer</label>\n\n                <input type=\"checkbox\" id=\"web graphic designer\" name=\"roles\" value=\"Web Graphic Designer\" onChange={(e) => handleRoles(e)} />\n                <label htmlFor=\"Web Graphic Designer\">Web Graphic Designer</label>\n\n                <input type=\"checkbox\" id=\"web analyst\" name=\"roles\" value=\"Web Analyst\" onChange={(e) => handleRoles(e)} />\n                <label htmlFor=\"Web Analyst\">Web Analyst</label>\n\n                <input type=\"checkbox\" id=\"web content writer\" name=\"roles\" value=\"Web Content Writer\" onChange={(e) => handleRoles(e)} />\n                <label htmlFor=\"Web Content Writer\">Web Content Writer</label>\n\n                <input type=\"checkbox\" id=\"quality assurance (QA) engineer\" name=\"roles\" value=\"Quality Assurance (QA) Engineer\" onChange={(e) => handleRoles(e)} />\n                <label htmlFor=\"Quality Assurance (QA) Engineer\">Quality Assurance (QA) Engineer</label>\n\n                <input type=\"checkbox\" id=\"web project manager\" name=\"roles\" value=\"Web Project Manager\" onChange={(e) => handleRoles(e)} />\n                <label htmlFor=\"Web Project Manager\">Web Project Manager</label>\n\n              </div>\n          </div>\n\n          <div className=\"social_info\">\n            <label className=\"labels\">GitHub</label>\n            <input \n            type=\"text\" \n            className=\"form-control\" \n            placeholder=\"social information\" \n            onChange={(e) => setSocialInfo(e.target.value)}\n            required/>\n          </div>\n\n          <div className=\"profile-actions\">\n            <button className=\"btn btn-primary profile-button\" type=\"submit\">Save Profile</button>\n          </div>\n      </div>\n</form>\n  )\n}\n\nexport default Profile","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Home.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Confirmation.js",["158"],[],"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\n\n\nfunction Confirmation() {\n  let {email} = useParams();\n  let {emailToken} = useParams();\n  const [isValidToken, setIsValidToken] = useState(false);\n\n  function verifyEmailToken(email, emailToken) {\n    console.log('testing function')\n    const usernameAndToken = {\n      email: email,\n      emailToken: emailToken,\n    }\n    axios.post(\"/api/user/verifyEmailToken\", usernameAndToken)\n      .then(response => {\n        const responseStatus = response.data.status;\n        if (responseStatus === 'okay') {\n          setIsValidToken(true);\n        }\n      })\n  }\n\n  useEffect(() => {\n    verifyEmailToken(email, emailToken);\n  }, [])\n\n  return (\n    <div>\n      {isValidToken ?\n        <div>\n          Email has been verified you can now sign in\n          <Link to=\"/login\">\n            Login\n          </Link>\n          </div>\n          :\n          <div>\n            Could not verify email or token is no longer valid\n          </div>\n        }\n    </div>\n  )\n}\n\nexport default Confirmation","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/Chatroom.js",["159","160","161","162"],[],"import \"./Chatroom.css\"\nimport { useEffect, useState } from \"react\";\nimport { useAuthContext } from \"../hooks/useAuthContext\"\nimport ScrollToBottom from \"react-scroll-to-bottom\"\nimport { useLocation } from 'react-router-dom';\n\n\nfunction Chatroom({socket}) {\n\n  const { user } = useAuthContext()\n\n  const [room, setRoom] = useState(\"\")\n\n  const [joined, setJoined] = useState(false)\n\n  const [currentMessage, setCurrentMessage] = useState(\"\")\n\n  const [messageList, setMessageList] = useState([])\n\n  const [roomList, setRoomList] = useState([])\n\n  const location = useLocation()\n\n  // const [messageFetched, setMessageFetched] = useState(false)\n  \n  // Function for fetching all the rooms current user is in\n  // Author: Junhao Hui\n  const fetchRooms = async () => {\n    const response = await fetch(\"api/user/room_num\", {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${user.token}`\n      }\n    })\n\n    const json = await response.json()\n    setRoomList(json)\n  }\n\n  // Function for fetching messages based on room number\n  // Author: Junhao Hui\n  const fetchMessages = async () => {\n    const response = await fetch('/api/message/' + room, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${user.token}`\n      },\n    })\n\n    const json = await response.json()\n    setMessageList(json)\n  }\n\n  // Function for storing new message into the database\n  // Author: Junhao Hui\n  const storeMessage = async (messageData) => {\n\n    const response = fetch('/api/message', {\n        method: 'POST',\n        body: JSON.stringify(messageData),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.token}`\n        }\n      })\n\n    const json = await response\n  } \n\n  // Function for adding the current room number to current user\n  // Author: Junhao Hui\n  const addRoom = async () => {\n\n    const response = await fetch('/api/user/join_room', {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${user.token}`,\n      },\n      body: JSON.stringify({ \"room_number\": room })\n    })\n\n    const json = await response.json()\n    console.log(json.message)\n  }\n\n  // Join room based on user input. Also add the current room to user's backend data\n  // Author: Junhao Hui\n  const joinRoom = async () => {\n    if (room !== \"\") {\n      socket.emit(\"join_room\", room)\n      if (!roomList.includes(room)){\n        if (location.state !== null){\n          await addRoom()\n        }\n        setRoomList([...roomList, room])\n      }\n      await fetchMessages()\n      setJoined(true)\n    } \n  }\n  \n  // Leave Current Room\n  // Author: Junhao Hui\n  const leaveRoom = async () => {\n\n    const response = await fetch('/api/user/leave', {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${user.token}`,\n      },\n      body: JSON.stringify({ \"room_num\" : room })\n    })\n\n    const json = await response.json()\n    setJoined(false)\n    setMessageList([])\n    setRoom(\"\")\n    fetchRooms()\n  }\n\n  // Send Message; Store message in db; update current queue\n  // Author: Junhao Hui\n  const sendMessage = async () => {\n\n    if (currentMessage !== \"\"){\n      const messageData = {\n        room: room, \n        author: user.email,\n        message: currentMessage,\n        time: \n          new Date(Date.now()).getHours() + \n          \":\" + \n          new Date(Date.now()).getMinutes()\n      }\n\n      await socket.emit(\"send_message\", messageData)\n      setMessageList((list) => [...list, messageData]);\n      await storeMessage(messageData)\n      setCurrentMessage(\"\")\n    }\n  }\n\n  const reJoin = (roomNumber) => {\n    if (roomNumber !== room){\n      setRoom(roomNumber)\n      setJoined(false)\n    }\n    joinRoom() \n  }\n\n  useEffect(() =>{\n    socket.on(\"receive_message\", (data) => {\n        setMessageList((list) => [...list, data])\n    })\n  }, [socket])\n\n  useEffect(() => {\n    if (user)\n      fetchRooms()\n  }, [user])\n\n  useEffect(() => {\n    if (location.state && location.state.fromRedirect) {\n      console.log(\"Redirection success. Creating/fetching room for project: \" + location.state.proj_name )\n      const directed = async () => {\n          const response = await fetch(\"api/user/by_id\", {\n            method:'PATCH',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${user.token}`\n            },\n            body: JSON.stringify({ \"proj_id\": location.state.proj_id, \"author_email\": location.state.auth_email, \"proj_name\": location.state.proj_name})\n          })\n        \n        const json = await response.json()\n        setRoom(json)\n        joinRoom()\n      }\n      if (user)\n        fetchRooms()\n        directed()\n\n    }\n  }, [location]);\n\n  const handleRoomName = (one_room) => {\n    if (one_room.includes('|')){\n      return one_room.split('|')[1] + \" - \" +  one_room.split('|')[2]\n    } else {\n      return one_room\n    }\n    \n  }\n\n  return (\n    <div className=\"chat-app-container\">\n    \n      <div className=\"room-name-container\">\n\n        <div className=\"joinChatContainer\">\n          <input\n            type=\"text\"\n            placeholder=\"Room ID...\"\n            onChange={(e) => setRoom(e.target.value)}\n            />\n            <button onClick={joinRoom}>Join A Room</button>\n        </div>\n\n        \n      </div>\n\n   \n        <div className=\"chat-window\">\n          <div className=\"chat-header\">\n            {joined ? <p>{handleRoomName(room)}</p> : <p>Join/Select Room</p> }\n          </div>\n          <div className=\"chat-body\">\n            <ScrollToBottom className=\"message-container\">\n              {messageList && messageList.map((messageContent) => {\n                return (\n                  <div\n                    className=\"message\"\n                    id={user.email === messageContent.author ? \"you\" : \"other\"}\n                  >\n                    <div>\n                      <div className=\"message-content\">\n                        <p>{messageContent.message}</p>\n                     </div>\n                     <div className=\"message-meta\">\n                        <p id=\"time\">{messageContent.time}</p>\n                        <p id=\"author\">{messageContent.author}</p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </ScrollToBottom>\n\n        </div>\n          <div className=\"chat-footer\">\n            <input\n              type=\"text\"\n              value={currentMessage}\n              placeholder=\"Spotlight's on you. Don't say anything bad plz\"\n              onChange={(event) => {\n                setCurrentMessage(event.target.value);\n              }}\n              onKeyPress={(event) => {\n                event.key === \"Enter\" && sendMessage();\n              }}\n            />\n            <button onClick={sendMessage}>&#9658;</button>\n          </div>\n      </div>\n      {joined && <button className=\"leave\" onClick={leaveRoom}>Leave Room</button>}\n\n      {roomList.length !== 0 && <h2 className=\"button-group-header\">Double-click the buttons to join room</h2>}\n      <div className=\"button-group\">\n          {roomList.length !== 0 && roomList.map((single_room) => {\n              return (<button onClick={() => reJoin(single_room)}>{handleRoomName(single_room)}</button>)\n            })}\n        </div>\n\n    </div>\n\n    \n  );\n}\n\nexport default Chatroom","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/MyProfile.js",["163","164"],[],"import React, { useState, useEffect } from 'react'\nimport './MyProfile.css'\nimport { useNavigate} from 'react-router-dom'\nimport profileImage from './profile.png'\nimport dog from './dog.png'\nimport waffle from './waffle.png'\n\nconst Profile = () => {\n  const [profile, setProfile] = useState({})\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    const getProfile = async () => {\n      const token = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')).token : null\n      if (!token) {\n        setIsLoading(false)\n        setError('User is not authenticated')\n        return\n      }\n      try {\n        const response = await fetch('/api/user/profile', {\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n        const json = await response.json()\n    \n        if (!response.ok) {\n          setIsLoading(false)\n          setError(json.error)\n        } else {\n          setProfile(json)\n          setIsLoading(false)\n        }\n      } catch (e) {\n        setIsLoading(false)\n        setError(e.message)\n      }\n    }    \n    getProfile()\n  }, [])\n\n  const handleEditProfile = () => {\n    navigate('/profile')\n  };\n\n  return (\n    <div className=\"myprofile-container\">\n      {isLoading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      {!isLoading && !error && (\n        <div>\n          <div className=\"myprofile-wrapper\">\n            <div className=\"myprofile-left\">\n              <img src={profileImage} alt=\"\" className=\"rounded-circle\" width=\"150\" height=\"150\" />\n              {/* <img src={dog} alt=\"\" className=\"rounded-circle\" width=\"150\" height=\"150\" /> */}\n              {/* <img src={waffle} alt=\"\" className=\"rounded-circle\" width=\"150\" height=\"150\" /> */}\n              <p className=\"myprofile-info\">{profile.firstName} {profile.lastName}</p>\n              <p className=\"myprofile-info\">{profile.roles?.join(\", \")}</p>\n            </div>\n            <div className=\"myprofile-right\">\n              <p className=\"myprofile-info\">\n                <span className=\"myprofile-info-label\">Full Name:</span>\n                <span className=\"myprofile-info-value\">{profile.firstName || ''} {profile.lastName || ''}</span>\n              </p>\n              <p className=\"myprofile-info\">\n                <span className=\"myprofile-info-label\">Email:</span>\n                <span className=\"myprofile-info-value\">{profile.email}</span>\n              </p>\n              <p className=\"myprofile-info\">\n                <span className=\"myprofile-info-label\">Year:</span>\n                <span className=\"myprofile-info-value\">{profile.year ? profile.year.charAt(0).toUpperCase() + profile.year.slice(1).toLowerCase() : ''}</span>\n              </p>\n              <p className=\"myprofile-info\">\n                <span className=\"myprofile-info-label\">Languages:</span>\n                <span className=\"myprofile-info-value\">{profile.languages ? profile.languages.join(\", \") : ''}</span>\n              </p>\n              <p className=\"myprofile-info\">\n                <span className=\"myprofile-info-label\">GitHub:</span>\n                <span className=\"myprofile-info-value\">{profile.socialInfo}</span>\n              </p>\n            </div>\n          </div>\n          <div className=\"myprofile-edit-button-container\">\n            <button className='myprofile-edit-button' onClick={handleEditProfile}>Edit Profile</button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Profile\n",[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/pages/projectSearchRes.js",["165","166"],[],"import \"../index.css\"\nimport { useAuthContext } from \"../hooks/useAuthContext\";\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport TinderCard from 'react-tinder-card'\nimport { useNavigate } from 'react-router-dom'\n\nconst Home = () => {\n\n  // Extract search tag from query parameter\n  const searchTag = useMemo(() => {\n    const params = new URLSearchParams(window.location.search);\n    return params.get('tag') || '';\n  }, []);\n\n  // Extract search keywords from query parameter\n  const searchKeyword = useMemo(() => {\n    const params = new URLSearchParams(window.location.search);\n    return params.get('search') || '';\n  }, []);\n\n  // Authentication & Projects\n  const { user } = useAuthContext()\n  const [searchResults, setSearchResults] = useState([])\n\n  // Store query from database\n  const resultQueue = useRef([])\n\n  // Store reference & value of index to the last element of current queue\n  const lastRef = useRef(0)\n  const [last, setlast] = useState(0)\n\n  // Store reference to the TinderCard compoenents\n  const proRef = useRef([])\n\n  // Helpers for re-rendering & refetching\n  const [cardContainerKey, setCardContainerKey] = useState(0);\n  const [refresh, setRefresh] = useState(true)\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchResults = async () => {\n      if (user) {\n        const response = await fetch(`/api/projects/search/${searchTag}/${searchKeyword}`, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${user.token}`\n          },\n        });\n        const data = await response.json();\n        setSearchResults(data);\n      }\n    }\n\n    if (user) {\n      console.log(\"fetching projects\")\n      fetchResults()\n    }\n  }, [user, refresh])\n\n\n  // Set the queues\n  useEffect(() => {\n    if (Array.isArray(searchResults)){\n      console.log(\"updating queues\")\n      resultQueue.current = searchResults\n      lastRef.current = searchResults.length - 1 \n      setlast(lastRef)\n      proRef.current = Array(searchResults.length).fill(0).map((i) => React.createRef())\n      setCardContainerKey(prevKey => prevKey + 1);\n    }\n  }, [searchResults])\n\n  // Update current index\n  const updateIndex = (val) => {\n    lastRef.current = val\n    setlast(val)\n  }\n\n  // When card leaves the screen\n  const outOfFrame = (title, index) => {\n    console.log(title)\n    lastRef.current >= index && proRef.current[index].current.restoreCard()\n  }\n  \n  // Regret button\n  const goBack = async () => {\n    console.log(last);\n    if (last < proRef.current.length - 1){\n      const newIndex = last + 1\n      updateIndex(newIndex)\n      await proRef.current[newIndex].current.restoreCard()\n    }\n  }\n\n  // Reset queue\n  const reset = () => {\n    setRefresh(!refresh)\n    setCardContainerKey(prevKey => prevKey + 1);\n  }\n\n  const handleKeyDown = async (event) => {\n\n    const { tagName } = event.target;\n\n    if (tagName === 'INPUT' || tagName === 'TEXTAREA') {\n      return\n    }\n\n    console.log(\"pressed\" + event.key)\n\n    if (last >= 0){\n      if (event.key === 'ArrowLeft') {\n        console.log(lastRef.current)\n        await proRef.current[lastRef.current].current.swipe(\"left\")\n      }\n  \n      if (event.key === 'ArrowRight') {\n        console.log(lastRef.current)\n        await proRef.current[lastRef.current].current.swipe(\"right\")\n      }\n    }\n\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [])\n\n\n  const handleChat = async (id, auth_email, name) => {\n    if (auth_email === user.email){\n      alert(\"You can't chat with yourself!\")\n    } else {\n      navigate('/chatroom', { state: { fromRedirect: true, proj_id: id, auth_email: auth_email, proj_name: name} })\n    }\n}\n\n  return (\n     \n    <div>\n      \n    <div className=\"card-container-result-page\" key={cardContainerKey}>\n    {resultQueue.current && resultQueue.current.map((project, index) =>\n      <TinderCard key={project._id} \n        ref = {proRef.current[index]}\n        onSwipe ={() => updateIndex(index - 1)} \n        onCardLeftScreen = {() => outOfFrame(project.title, index)}\n        preventSwipe={[\"down\",\"up\"]} \n        className=\"cards-result-page\"\n        >\n        <div className=\"card-body-result-page\">\n        <h5 className=\"creator\">Creator: {project.email}</h5>\n          <h5 className=\"card-title-result-page\">{project.title}</h5>\n          <div className=\"d-flex justify-content-between\">\n            <p className=\"card-text mb-0\">\n              <i className=\"bi bi-people\"></i> Teammates: {project.nums}\n            </p>\n            <div className=\"tags-result-page\">\n              {project.tags.map(tag => {\n                return <span key={tag} className=\"card-tag badge bg-primary\">\n                  {tag}\n                </span>\n              })}\n            </div>\n          </div>\n          <hr />\n          <p className=\"card-des-result-page\">{project.description}</p>\n          <button className=\"interested\" onClick={() => {handleChat(project._id, project.email, project.title)}}>💬</button>\n        </div>\n    </TinderCard>\n  )}\n\n  </div>\n\n      <button onClick={goBack} className=\"button-51-result-page\">Regret button</button>\n      <button onClick={reset} className=\"button-52-result-page\">Show results again?</button>\n  \n  </div>\n)\n\n};\nexport default Home;\n","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useLogout.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useDelete.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useLogin.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/ProjectCard.js",["167","168"],[],"import React from 'react'\nimport TinderCard from 'react-tinder-card'\nimport { useEffect, useState, useRef }from 'react'\nimport { useProjectsContext } from \"../hooks/useProjectsContext\"\nimport { useAuthContext } from \"../hooks/useAuthContext\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap-icons/font/bootstrap-icons.css'\nimport { useNavigate } from 'react-router-dom'\n\nconst ProjectCard = () => {\n\n  // Authentication & Projects\n  const {projects, dispatch} = useProjectsContext()\n  const {user} = useAuthContext()\n\n  // Store query from database\n  const resultQueue = useRef([])\n\n  // Store reference & value of index to the last element of current queue\n  const lastRef = useRef(0)\n  const [last, setlast] = useState(0)\n\n  // Store reference to the TinderCard compoenents\n  const proRef = useRef([])\n\n  // Helpers for re-rendering & refetching\n  const [cardContainerKey, setCardContainerKey] = useState(0);\n  const [refresh, setRefresh] = useState(true)\n\n  const navigate = useNavigate()\n\n  // Refresh the queue on refreshing the page\n  useEffect(() =>  {\n\n    // Fetch all projects\n    const fetchProjects = async () => {\n      const response = await fetch('/api/projects/all', {\n        headers: {'Authorization': `Bearer ${user.token}`},\n      })\n      const json = await response.json()\n\n      if (response.ok) {\n        dispatch({type: 'SET_PROJECTS', payload: json})\n      }\n    }\n\n    if (user) {\n      console.log(\"fetching all projects\")\n        fetchProjects()\n      }\n  }, [user, refresh])\n\n\n  // Set the queues\n  useEffect(() => {\n    if (Array.isArray(projects)){\n      console.log(\"updating queues\")\n      resultQueue.current = [...projects]\n      lastRef.current = projects.length - 1 \n      setlast(lastRef.current)\n      proRef.current = Array(projects.length).fill(0).map((i) => React.createRef())\n    }\n  }, [projects])\n\n\n  // Update current index\n  const updateIndex = (val) => {\n    lastRef.current = val\n    setlast(val)\n  }\n\n  // When card leaves the screen\n  const outOfFrame = (title, index) => {\n    console.log(title)\n    lastRef.current >= index && proRef.current[index].current.restoreCard()\n  }\n  \n  // Regret button\n  const goBack = async () => {\n    console.log(last);\n    console.log(proRef);\n    if (last < proRef.current.length - 1){\n      const newIndex = last + 1\n      updateIndex(newIndex)\n      await proRef.current[newIndex].current.restoreCard()\n    }\n  }\n\n  // Reset queue\n  const reset = () => {\n    setRefresh(!refresh)\n    setCardContainerKey(prevKey => prevKey + 1)\n  }\n\n  const handleKeyDown = async (event) => {\n\n    const { tagName } = event.target;\n\n    if (tagName === 'INPUT' || tagName === 'TEXTAREA') {\n      return;\n    }\n\n    console.log(\"pressed\" + event.key)\n\n    if (last >= 0){\n  \n      if (event.key === 'ArrowLeft') {\n        console.log(lastRef.current)\n        console.log(proRef.current[lastRef.current].current)\n        await proRef.current[lastRef.current].current.swipe(\"left\")\n      }\n  \n      if (event.key === 'ArrowRight') {\n        console.log(lastRef.current)\n        console.log(proRef.current[lastRef.current].current)\n        await proRef.current[lastRef.current].current.swipe(\"right\")\n      }\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    }\n  }, [])\n\n  const handleChat = async (id, auth_email, name) => {\n      if (auth_email === user.email){\n        alert(\"You can't chat with yourself!\")\n      } else {\n        navigate('/chatroom', { state: { fromRedirect: true, proj_id: id, auth_email: auth_email, proj_name: name} })\n      }\n  }\n\n  return (\n    \n    <div>\n      <div className=\"card-container\" key={cardContainerKey} >\n      {resultQueue.current && resultQueue.current.map((project, index) =>\n        <TinderCard key={project._id} \n          ref = {proRef.current[index]}\n          onSwipe ={() => updateIndex(index - 1)} \n          onCardLeftScreen = {() => outOfFrame(project.title, index)}\n          preventSwipe={[\"down\", \"up\"]} \n          className=\"cards\"\n          >\n          <div className=\"card-body\">\n          <h5 className=\"creator\">Creator: {project.email}</h5>\n            <h5 className=\"card-title\">{project.title}</h5>\n            <div className=\"d-flex justify-content-between\">\n              <p className=\"card-text mb-0\">\n                <i className=\"bi bi-people\"></i> Teammates: {project.nums}\n              </p>\n              <div className=\"tags\">\n                {project.tags.map(tag => {\n                  return <span key={tag} className=\"card-tag badge bg-primary\">\n                    {tag}\n                  </span>\n                })}\n              </div>\n            </div>\n            <hr />\n            <p className=\"card-des\">{project.description}</p>\n            <button className=\"interested\" onClick={() => {handleChat(project._id, project.email, project.title)}}>💬</button>\n          </div>\n      </TinderCard>\n    )}\n\n    </div>\n\n          <button onClick={goBack} className=\"button-51\">Get back one project</button>\n          <button onClick={reset} className=\"button-52\">Show all projects again?</button>\n\n    </div>\n  )\n\n}\n\nexport default ProjectCard","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useProfile.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useProjectsContext.js",[],[],"/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/hooks/useSignup.js",["169"],[],"import { useState } from 'react'\nimport { useAuthContext } from './useAuthContext'\n\nexport const useSignup = () => {\n  const [error, setError] = useState(null)\n  const [isLoading, setIsLoading] = useState(null)\n  const { dispatch } = useAuthContext()\n\n  const signup = async (email, password) => {\n    setIsLoading(true)\n    setError(null)\n\n    const response = await fetch('/api/user/signup', {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({ email, password })\n    })\n    const json = await response.json()\n\n    if (!response.ok) {\n      setIsLoading(false)\n      setError(json.error)\n    }\n    if (response.ok) {\n      // save the user to local storage\n      localStorage.setItem('user', JSON.stringify(json))\n      alert('An email has been sent to your email address with instructions on how to verify your email address.')\n\n      // update the auth context\n      //dispatch({type: 'LOGIN', payload: json})\n\n      // update loading state\n      setIsLoading(false)\n    }\n  }\n\n  return { signup, isLoading, error }\n}","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/ProjectForm.js",["170"],[],"import { useEffect, useState } from \"react\"\nimport { useProjectsContext } from \"../hooks/useProjectsContext\"\nimport { useAuthContext } from '../hooks/useAuthContext'\n\nconst ProjectForm = () => {\n  const { dispatch } = useProjectsContext()\n  const { user } = useAuthContext()\n\n  const [title, setTitle] = useState('')\n  const [description, setDescription] = useState('')\n  const [nums, setNums] = useState('')\n  const [error, setError] = useState(null)\n  const [emptyFields, setEmptyFields] = useState([])\n  const [selectedTags, setSelectedTags] = useState(new Set())\n\n\n  const availableTags = {\n    languages: ['Python', 'C++', 'Java', 'JavaScript', 'C', 'HTML/CSS', 'PHP', 'SQL', 'Swift', 'Go', 'Kotlin'],\n    projectType: [\n      'Front-end',\n      'Back-end',\n      'Full-stack',\n      'React',\n      'Flask',\n      \"Rest\",\n      'Machine Learning',\n      'Data Analysis',\n      'Smart Devices',\n      'Artificial Intelligence',\n      'Social Network',\n      'Visualization',\n    ],\n    courseNumber: ['CS1101', 'CS2201', 'CS2212', 'CS3250', 'CS3251', 'CS3281', 'CS3270','CS4278', 'CS3265', 'CS4260', 'CS4288','CS3891'],\n    More: ['Others'],\n  };\n\n  const renderTagSubList = (category) => (\n    <>\n      <label>{category}:</label>\n      <div className=\"proj-tag-container\">\n        {availableTags[category].map((tag) => (\n          <div key={tag} className=\"proj-tag-option\">\n            <input\n              type=\"checkbox\"\n              id={`tag-${tag}`}\n              className=\"proj-tag-checkbox\"\n              checked={selectedTags.has(tag)}\n              onChange={() => handleTagChange(tag)}\n            />\n            <label htmlFor={`tag-${tag}`} className=\"proj-tag-label\">\n              {tag}\n            </label>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n\n  const handleTagChange = (tag) => {\n    const newSelectedTags = new Set(selectedTags)\n    if (newSelectedTags.has(tag)) {\n      newSelectedTags.delete(tag)\n    } else {\n      newSelectedTags.add(tag)\n    }\n    setSelectedTags(newSelectedTags)\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    if (!user) {\n      setError('You must be logged in')\n      return\n    } \n  \n    const project = {title, description, tags: Array.from(selectedTags), nums}\n\n    const response = await fetch('/api/projects/', {\n      method: 'POST',\n      body: JSON.stringify(project),\n      headers: {\n        'Authorization': `Bearer ${user.token}`,\n        'Content-Type': 'application/json'\n      }\n    })\n    const json = await response.json()\n\n    if (!response.ok) {\n      setError(json.error)\n      setEmptyFields(json.emptyFields)\n    }\n    if (response.ok) {\n      setTitle('')\n      setDescription('')\n      setNums('')\n      setError(null)\n      setEmptyFields([])\n      \n      dispatch({type: 'CREATE_PROJECT', payload: json})\n    }\n  }\n\n  return (\n    <form className=\"create\" onSubmit={handleSubmit}>\n      <h3>Add a New Project</h3>\n\n      <label>Project Title:</label>\n      <input \n        type=\"text\"\n        onChange={(e) => setTitle(e.target.value)}\n        value={title}\n        className={emptyFields.includes('title') ? 'error' : ''}\n      />\n\n      <label>Description:</label>\n      <input \n        type=\"text\"\n        onChange={(e) => setDescription(e.target.value)}\n        value={description}\n        className={emptyFields.includes('description') ? 'error' : ''}\n      />\n\n      <label>Tags:</label>\n      <div className=\"proj-tag-container\">\n      {renderTagSubList(\"languages\")}\n      {renderTagSubList(\"projectType\")}\n      {renderTagSubList(\"courseNumber\")}\n      {renderTagSubList(\"More\")}\n    </div>\n\n      <label>Required members:</label>\n      <input \n        type=\"number\"\n        onChange={(e) => setNums(e.target.value)}\n        value={nums}\n        className={emptyFields.includes('nums') ? 'error' : ''}\n      />\n\n      <button>Add Project</button>\n      {error && <div className=\"error\">{error}</div>}\n    </form>\n  )\n}\n\nexport default ProjectForm","/Users/jiashunli/Desktop/legendary-waffle/Mern Stack/frontend/src/components/ProjectDetails.js",[],[],{"ruleId":"171","severity":1,"message":"172","line":3,"column":10,"nodeType":"173","messageId":"174","endLine":3,"endColumn":23},{"ruleId":"171","severity":1,"message":"175","line":31,"column":11,"nodeType":"173","messageId":"174","endLine":31,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":81,"column":8,"nodeType":"178","endLine":81,"endColumn":10,"suggestions":"179"},{"ruleId":"180","severity":1,"message":"181","line":59,"column":11,"nodeType":"182","endLine":59,"endColumn":206},{"ruleId":"176","severity":1,"message":"183","line":30,"column":6,"nodeType":"178","endLine":30,"endColumn":8,"suggestions":"184"},{"ruleId":"171","severity":1,"message":"185","line":68,"column":11,"nodeType":"173","messageId":"174","endLine":68,"endColumn":15},{"ruleId":"171","severity":1,"message":"185","line":117,"column":11,"nodeType":"173","messageId":"174","endLine":117,"endColumn":15},{"ruleId":"176","severity":1,"message":"186","line":163,"column":6,"nodeType":"178","endLine":163,"endColumn":12,"suggestions":"187"},{"ruleId":"176","severity":1,"message":"188","line":187,"column":6,"nodeType":"178","endLine":187,"endColumn":16,"suggestions":"189"},{"ruleId":"171","severity":1,"message":"190","line":5,"column":8,"nodeType":"173","messageId":"174","endLine":5,"endColumn":11},{"ruleId":"171","severity":1,"message":"191","line":6,"column":8,"nodeType":"173","messageId":"174","endLine":6,"endColumn":14},{"ruleId":"176","severity":1,"message":"192","line":59,"column":6,"nodeType":"178","endLine":59,"endColumn":21,"suggestions":"193"},{"ruleId":"176","severity":1,"message":"194","line":131,"column":6,"nodeType":"178","endLine":131,"endColumn":8,"suggestions":"195"},{"ruleId":"176","severity":1,"message":"196","line":51,"column":6,"nodeType":"178","endLine":51,"endColumn":21,"suggestions":"197"},{"ruleId":"176","severity":1,"message":"194","line":126,"column":6,"nodeType":"178","endLine":126,"endColumn":8,"suggestions":"198"},{"ruleId":"171","severity":1,"message":"199","line":7,"column":11,"nodeType":"173","messageId":"174","endLine":7,"endColumn":19},{"ruleId":"171","severity":1,"message":"200","line":1,"column":10,"nodeType":"173","messageId":"174","endLine":1,"endColumn":19},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'tagOptions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userValid'. Either include it or remove the dependency array.","ArrayExpression",["201"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'email' and 'emailToken'. Either include them or remove the dependency array.",["202"],"'json' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchRooms'. Either include it or remove the dependency array.",["203"],"React Hook useEffect has missing dependencies: 'fetchRooms', 'joinRoom', and 'user'. Either include them or remove the dependency array.",["204"],"'dog' is defined but never used.","'waffle' is defined but never used.","React Hook useEffect has missing dependencies: 'searchKeyword' and 'searchTag'. Either include them or remove the dependency array.",["205"],"React Hook useEffect has a missing dependency: 'handleKeyDown'. Either include it or remove the dependency array.",["206"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["207"],["208"],"'dispatch' is assigned a value but never used.","'useEffect' is defined but never used.",{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"219","fix":"223"},"Update the dependencies array to be: [userValid]",{"range":"224","text":"225"},"Update the dependencies array to be: [email, emailToken]",{"range":"226","text":"227"},"Update the dependencies array to be: [fetchRooms, user]",{"range":"228","text":"229"},"Update the dependencies array to be: [fetchRooms, joinRoom, location, user]",{"range":"230","text":"231"},"Update the dependencies array to be: [user, refresh, searchTag, searchKeyword]",{"range":"232","text":"233"},"Update the dependencies array to be: [handleKeyDown]",{"range":"234","text":"235"},"Update the dependencies array to be: [user, refresh, dispatch]",{"range":"236","text":"237"},{"range":"238","text":"235"},[2243,2245],"[userValid]",[796,798],"[email, emailToken]",[4050,4056],"[fetchRooms, user]",[4844,4854],"[fetchRooms, joinRoom, location, user]",[1753,1768],"[user, refresh, searchTag, searchKeyword]",[3532,3534],"[handleKeyDown]",[1503,1518],"[user, refresh, dispatch]",[3368,3370]]